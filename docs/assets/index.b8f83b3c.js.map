{"version":3,"file":"index.b8f83b3c.js","sources":["../../src/input/xr/xr-input.js","../../vite/dynamic-import-polyfill","../../src/input/mobile/mobile-input.js","../../src/input/input-system.js","../../src/_helpers/wait-until.js","../../src/locomotion/walk.js","../../src/locomotion/_locomotion.js","../../src/locomotion/snap-turn.js","../../src/_helpers/rotate-about-point.js","../../src/index.js","../../src/collisions/collisions.js","../../examples/example1.js"],"sourcesContent":["import * as THREE from \"three\"\nimport { inputSystem } from \"../input-system\"\nimport waitUntil from \"../../_helpers/wait-until\"\nimport { Camera } from \"three\"\n\nlet originalCamera\nlet XRSession\nlet controllers = {}\n\nexport function getXRControllers() {\n  return controllers\n}\n\nexport function getXRSession() {\n  return XRSession\n}\n\nexport function getXRCamera() {\n  return renderer.xr.getCamera(originalCamera)\n}\n\nasync function buildController(data) {\n  let geometry, material\n\n  if (data.targetRayMode == \"tracked-pointer\") {\n    geometry = new THREE.RingBufferGeometry(0.02, 0.04, 32) //.translate(0, 0, -1)\n    material = new THREE.MeshBasicMaterial({\n      opacity: 0.5,\n      transparent: true,\n      side: THREE.DoubleSide,\n    })\n    return new THREE.Mesh(geometry, material)\n  }\n}\n\nexport function getXRGamepads() {\n  const pads = XRSession && XRSession.inputSources\n  if (pads) {\n    const list = [pads[0], pads[1]].filter((i) => i)\n    const left = list.find((i) => i.handedness === \"left\")\n    const right = list.find((i) => i.handedness === \"right\")\n    if (!left || !right) {\n      return false\n    }\n    return { left, right }\n  }\n  return null\n}\n\nexport function getXRGamepadButtonValue(hand, index) {\n  return getXRGamepads() && getXRGamepads()[hand].gamepad.buttons.map((i) => i.value)[index]\n}\n\nexport async function initXRSession({ renderer, scene, rig, camera }) {\n  originalCamera = camera\n\n  renderer.xr.enabled = true\n  const sessionOptions = { optionalFeatures: [\"local-floor\", \"bounded-floor\", \"hand-tracking\"] }\n  XRSession = await navigator.xr.requestSession(\"immersive-vr\", sessionOptions)\n  if (!XRSession) {\n    console.log(\"session not there\")\n    alert(\"XR Session not started\")\n    return\n  }\n  XRSession.addEventListener(\"end\", function () {\n    console.log(\"session end\")\n    //   GAME_STOPPED = true\n    XRSession = null\n  })\n  renderer.xr.setSession(XRSession)\n\n  // PLAYER HEIGHT\n  // console.log(renderer.xr.getCamera(camera).position.y)\n\n  for (const index of [0, 1]) {\n    const controller = renderer.xr.getController(index)\n    controller.addEventListener(\"connected\", async function (event) {\n      // console.log(\"connected\", event)\n      const mesh = await buildController(event.data)\n      controllers[event.data.handedness] = {\n        hand: event.data.handedness,\n        mesh: mesh,\n      }\n      this.add(mesh)\n    })\n    controller.addEventListener(\"disconnected\", function () {\n      this.remove(this.children[0])\n    })\n    rig.add(controller)\n  }\n\n  return await waitUntil(\n    function () {\n      return controllers.left && controllers.right\n    },\n    5000,\n    \"Controllers not loaded (timeout)\"\n  )\n}\n","const p = function polyfill(modulePath = '.', importFunctionName = '__import__') {\n    try {\n        self[importFunctionName] = new Function('u', `return import(u)`);\n    }\n    catch (error) {\n        const baseURL = new URL(modulePath, location);\n        const cleanup = (script) => {\n            URL.revokeObjectURL(script.src);\n            script.remove();\n        };\n        self[importFunctionName] = (url) => new Promise((resolve, reject) => {\n            const absURL = new URL(url, baseURL);\n            // If the module has already been imported, resolve immediately.\n            if (self[importFunctionName].moduleMap[absURL]) {\n                return resolve(self[importFunctionName].moduleMap[absURL]);\n            }\n            const moduleBlob = new Blob([\n                `import * as m from '${absURL}';`,\n                `${importFunctionName}.moduleMap['${absURL}']=m;`\n            ], { type: 'text/javascript' });\n            const script = Object.assign(document.createElement('script'), {\n                type: 'module',\n                src: URL.createObjectURL(moduleBlob),\n                onerror() {\n                    reject(new Error(`Failed to import: ${url}`));\n                    cleanup(script);\n                },\n                onload() {\n                    resolve(self[importFunctionName].moduleMap[absURL]);\n                    cleanup(script);\n                }\n            });\n            document.head.appendChild(script);\n        });\n        self[importFunctionName].moduleMap = {};\n    }\n};__VITE_IS_MODERN__&&p(\"assets/\");","import hasParent from \"../../_helpers/dom-element-has-parent\"\nimport delay from \"delay\"\nimport deepmerge from \"deepmerge\"\nimport { MaxEquation } from \"three\"\n\nconst BACK_TO_POSITION_ANIMATION_DURATION = 200\nconst JOYSTICK_RADIUS = 80\n\nlet htmlContainer\nconst virtualJoysticks = {\n  left: null,\n  right: null,\n}\n\nconst screenSize = {\n  x: 0,\n  y: 0,\n}\n\nfunction createJoystick(side) {\n  const defaultState = {\n    active: false,\n    touchIdentifier: null,\n    touchStartPosition: {\n      x: 0,\n      y: 0,\n    },\n    innerCirclePosition: {\n      x: 0,\n      y: 0,\n    },\n    vector: {\n      x: 0,\n      y: 0,\n    },\n  }\n  let self = deepmerge({}, defaultState)\n\n  const zone = document.createElement(\"div\")\n  zone.classList.add(\"joystick-zone\")\n  zone.innerHTML = `\n        <div class=\"joystick\">\n        </div>\n        <div class=\"inner-circle\"></div>\n    `\n  const joystickElement = zone.querySelector(\".joystick\")\n  const innerCircleElement = zone.querySelector(\".inner-circle\")\n\n  async function resetZonePosition() {\n    zone.classList.add(\"animate-joystick-start-position\")\n    if (side === \"left\") {\n      zone.style.left = \"15px\"\n      joystickElement.style.top = \"70vh\"\n      joystickElement.style.left = \"20vw\"\n      innerCircleElement.style.top = \"70vh\"\n      innerCircleElement.style.left = \"20vw\"\n    }\n    if (side === \"right\") {\n      zone.style.right = \"15px\"\n      joystickElement.style.top = \"70vh\"\n      joystickElement.style.left = \"80vw\"\n      innerCircleElement.style.top = \"70vh\"\n      innerCircleElement.style.left = \"80vw\"\n    }\n    await delay(BACK_TO_POSITION_ANIMATION_DURATION)\n    zone.classList.remove(\"animate-joystick-start-position\")\n  }\n  resetZonePosition()\n\n  joystickElement.style.bottom = \"20vh\"\n  innerCircleElement.style.bottom = \"20vh\"\n\n  function updateJoystickPosition({ x, y }) {\n    joystickElement.style.top = `${y}px`\n    joystickElement.style.left = `${x}px`\n  }\n\n  function updateInnerCirclePosition({ x, y }) {\n    innerCircleElement.style.top = `${y}px`\n    innerCircleElement.style.left = `${x}px`\n  }\n\n  function intersectLineCircle({ point, circleCenter, radius }) {\n    // console.log(...arguments)\n    // const output = lineCircleCollision(\n    //     [endPoint.x, endPoint.y],\n    //   [startPoint.x, startPoint.y],\n    //   [circleCenter.x, circleCenter.y],\n    //   radius\n    // )\n    const lenX = point.x - circleCenter.x\n    const lenY = point.y - circleCenter.y\n\n    const lineLength = Math.sqrt(\n      (point.x - circleCenter.x) * (point.x - circleCenter.x) +\n        (point.y - circleCenter.y) * (point.y - circleCenter.y)\n    )\n    const alpha = (lineLength - radius) / lineLength\n    // console.log(alpha)\n    if (alpha <= 0) {\n      return false\n    }\n    // return output\n    return {\n      x: point.x + (circleCenter.x - point.x) * alpha,\n      y: point.y + (circleCenter.y - point.y) * alpha,\n    }\n  }\n\n  function getVectorValue({ center, point, radius }) {\n    return {\n      x: (point.x - center.x) / radius,\n      y: (-1 * (point.y - center.y)) / radius,\n    }\n  }\n\n  zone.addEventListener(\"touchstart\", (event) => {\n    // console.log(\"touchstart\", event)\n    joystickElement.classList.add(\"active\")\n    innerCircleElement.classList.add(\"active\")\n    if (self.active) {\n      return\n    }\n    self.active = true\n    self.touchIdentifier = event.targetTouches[0].identifier\n    self.touchStartPosition.x = event.targetTouches[0].pageX\n    self.touchStartPosition.y = event.targetTouches[0].pageY\n    updateJoystickPosition(self.touchStartPosition)\n    updateInnerCirclePosition(self.touchStartPosition)\n  })\n  zone.addEventListener(\"touchmove\", (event) => {\n    // console.log(\"touchmove\", event.changedTouches.item(self.touchIdentifier))\n    // console.log(\"touchmove\", event.touches.length, event.changedTouches.length, event.targetTouches.length)\n    if (self.active) {\n      const point = {\n        x: event.touches.item(self.touchIdentifier).pageX,\n        y: event.touches.item(self.touchIdentifier).pageY,\n      }\n      const intersection = intersectLineCircle({\n        point,\n        circleCenter: self.touchStartPosition,\n        radius: JOYSTICK_RADIUS,\n      })\n      if (intersection) {\n        self.innerCirclePosition.x = intersection.x\n        self.innerCirclePosition.y = intersection.y\n      } else {\n        self.innerCirclePosition.x = event.targetTouches[0].pageX\n        self.innerCirclePosition.y = event.targetTouches[0].pageY\n      }\n\n      self.vector = getVectorValue({\n        center: self.touchStartPosition,\n        point: self.innerCirclePosition,\n        radius: JOYSTICK_RADIUS,\n      })\n      updateInnerCirclePosition(self.innerCirclePosition)\n    }\n  })\n  zone.addEventListener(\"touchend\", () => {\n    // console.log(\"touchend\", event)\n    self = deepmerge({}, defaultState)\n    setTimeout(resetZonePosition, 100)\n    joystickElement.classList.remove(\"active\")\n    innerCircleElement.classList.remove(\"active\")\n  })\n\n  return {\n    getVector() {\n      return self.vector\n    },\n    element: zone,\n  }\n}\n\nexport async function initMobileInput() {\n  if (!location.href.includes(\"localhost\")) {\n    document.documentElement.requestFullscreen()\n  }\n\n  htmlContainer = document.createElement(\"div\")\n  htmlContainer.classList.add(\"virtual-joysticks\")\n  document.body.appendChild(htmlContainer)\n\n  virtualJoysticks.left = createJoystick(\"left\")\n  htmlContainer.appendChild(virtualJoysticks.left.element)\n\n  virtualJoysticks.right = createJoystick(\"right\")\n  htmlContainer.appendChild(virtualJoysticks.right.element)\n\n  //   document.body.addEventListener(\"touchstart\", (event) => {\n  //     // console.log('touchstart', event)\n  //     if (true) {\n  //       // console.log(event.clientX, event.clientY, screen.width, screen.height)\n  //     }\n  //   })\n  //   document.body.addEventListener(\"touchmove\", (event) => {\n  //     // console.log(\"touchmove\", event.targetTouches)\n  //   })\n  //   document.body.addEventListener(\"touchend\", (event) => {\n  //     // console.log('touchstart', event)\n  //   })\n}\n\nexport function getMobileJoysticksValue() {\n  return {\n    left: virtualJoysticks.left.getVector(),\n    right: virtualJoysticks.right.getVector(),\n  }\n}\n\nconst style = document.createElement(\"style\")\nstyle.innerHTML = `\n    .virtual-joysticks {\n        position: fixed;\n        left: 0;\n        bottom: 0;\n    }\n    .virtual-joysticks .joystick-zone {\n        __background: rgba(0, 255, 0, .3);\n        position: fixed;\n        bottom: 15px;\n        width: calc(50vw - 30px);\n        height: calc(60vh - 30px);\n    }\n    .virtual-joysticks .joystick {\n        width: 1px;\n        height: 1px;\n        position: fixed;\n        transition: opacity 500ms ease;\n        opacity: .3;\n    }\n    .virtual-joysticks .joystick:after {\n        content: \"\";\n        display:block;\n        width: ${JOYSTICK_RADIUS * 2}px;\n        height: ${JOYSTICK_RADIUS * 2}px;\n        background: rgba(255, 255, 255, .2);\n        border: 2px solid rgba(255, 255, 255, .6);\n        border-radius: 50%;\n        transform: translate3d(-50%,-50%,0);\n    }\n    .virtual-joysticks .inner-circle {\n        width: 1px;\n        height: 1px;\n        position: fixed;\n        transition: opacity 500ms ease;\n        opacity: .5;\n    }\n    .virtual-joysticks .inner-circle:after {\n        content: \"\";\n        display:block;\n        width: 50px;\n        height: 50px;\n        background: rgba(255, 255, 255, .4);\n        border-radius: 50%;\n        transform: translate3d(-50%,-50%,0);\n    }\n\n    .animate-joystick-start-position .joystick,\n    .animate-joystick-start-position .inner-circle {\n        transition: ${BACK_TO_POSITION_ANIMATION_DURATION}ms ease;\n    }\n    .virtual-joysticks .joystick.active {\n        opacity: 1;\n    }\n    .virtual-joysticks .inner-circle.active {\n        opacity: 1;\n    }\n`\ndocument.head.appendChild(style)\n","import {\n  initXRSession,\n  getXRSession,\n  getXRControllers,\n  getXRGamepads,\n  getXRCamera,\n} from \"./xr/xr-input\"\n\nimport { initMobileInput, getMobileJoysticksValue } from \"./mobile/mobile-input\"\n\nlet keyboardState = {}\n\nexport function initInputSystem({ renderer }) {\n  document.addEventListener(\n    \"keydown\",\n    (event) => {\n      keyboardState[event.code] = true\n    },\n    false\n  )\n  document.addEventListener(\n    \"keyup\",\n    (event) => {\n      keyboardState[event.code] = false\n    },\n    false\n  )\n}\n\nexport const inputSystem = (window.inputSystem = {\n  // vr\n  initXRSession,\n  getXRControllers,\n  getXRGamepads,\n  getXRSession,\n  getXRCamera,\n  // mobile\n  initMobileInput,\n  getMobileJoysticksValue,\n  // desktop\n  getKeyboardState() {\n    return keyboardState\n  },\n})\n","import delay from \"delay\"\n\nexport default async function waitUntil(conditionFn, timeout, err) {\n  return new Promise(async function (resolve) {\n    err = err || \"waitUntil : timeout on condition : \" + conditionFn\n    while (!conditionFn()) {\n      //console.log(conditionFn())\n      if (timeout < 0) {\n        throw new Error(err)\n      }\n      await delay(300)\n      timeout -= 300\n    }\n    resolve()\n  })\n}\n","import { inputSystem } from \"../input/input-system\"\nimport * as THREE from \"three\"\n\nconst SPEED = 4\nconst MOBILE_SPEEDUP_FACTOR = 4\n\nexport default function ({ platform, camera, rig }) {\n  let playerVelocity = new THREE.Vector3(0, 0, 0)\n\n  const desktopKeyboardState = {}\n  if (platform.type == \"desktop\" || platform.type == \"mobile\") {\n    camera.rotation.order = \"YXZ\"\n  }\n  if (platform.type == \"desktop\") {\n    document.body.requestPointerLock()\n\n    document.body.addEventListener(\n      \"mousemove\",\n      (event) => {\n        if (document.pointerLockElement === document.body) {\n          camera.rotation.y -= event.movementX / 500\n          camera.rotation.x -= -event.movementY / 500\n        }\n      },\n      false\n    )\n  }\n\n  function getSideVector() {\n    const direction = getForwardVector(camera)\n    direction.cross(camera.up)\n    return direction\n  }\n\n  function getForwardVector() {\n    const direction = new THREE.Vector3()\n    if (platform.type == \"desktop\" || platform.type == \"mobile\") {\n      camera.getWorldDirection(direction)\n      direction.y = 0\n    }\n    if (platform.type == \"vr\") {\n      inputSystem.getXRControllers().left.mesh.parent.getWorldDirection(direction)\n      direction.multiplyScalar(-1)\n    }\n    return direction\n  }\n\n  return {\n    update(deltaTime) {\n      let forwardValue = 0\n      let sideValue = 0\n\n      if (platform.type == \"desktop\") {\n        const keys = inputSystem.getKeyboardState()\n        const forward = keys[\"KeyW\"] ? 1 : 0\n        const backward = keys[\"KeyS\"] ? -1 : 0\n        const right = keys[\"KeyD\"] ? 1 : 0\n        const left = keys[\"KeyA\"] ? -1 : 0\n        forwardValue = forward + backward\n        sideValue = left + right\n      }\n\n      if (platform.type == \"mobile\") {\n        forwardValue = inputSystem.getMobileJoysticksValue().left.y * MOBILE_SPEEDUP_FACTOR\n        sideValue = inputSystem.getMobileJoysticksValue().left.x * MOBILE_SPEEDUP_FACTOR\n\n        camera.rotation.y -= inputSystem.getMobileJoysticksValue().right.x / 40\n        camera.rotation.x -= inputSystem.getMobileJoysticksValue().right.y / 40\n      }\n\n      if (platform.type == \"vr\") {\n        forwardValue = inputSystem.getXRGamepads().left.gamepad.axes[3] * -1\n        sideValue = inputSystem.getXRGamepads().left.gamepad.axes[2]\n      }\n\n      const deltaPosition = new THREE.Vector3(0, 0, 0)\n      deltaPosition\n        .add(getForwardVector(camera).multiplyScalar(forwardValue))\n        .add(getSideVector(camera).multiplyScalar(sideValue))\n        //.normalize()\n        .multiplyScalar(SPEED * deltaTime)\n      playerVelocity.add(deltaPosition)\n      const damping = Math.exp(-30 * deltaTime) - 1\n      playerVelocity.addScaledVector(playerVelocity, damping)\n      rig.position.add(playerVelocity)\n    },\n  }\n}\n","import initWalkingSystem from \"./walk\"\nimport initSnapTurnSystem from \"./snap-turn\"\n\n// import initClimbingSystem from \"./climb\"\n// import initFlyingSystem from \"./fly\"\n\nexport default function ({ platform, overlay, camera, rig }) {\n  // console.log(platform)\n\n  let walkingSystem, snapTurnSystem\n\n  if (platform.isEnabled(\"walk\")) {\n    walkingSystem = initWalkingSystem({ platform, camera, rig })\n  }\n  if (platform.isEnabled(\"snap-turn\")) {\n    snapTurnSystem = initSnapTurnSystem({ rig })\n  }\n\n  return {\n    update(deltaTime) {\n      if (platform.isEnabled(\"walk\")) {\n        walkingSystem.update(deltaTime)\n      }\n      if (platform.isEnabled(\"snap-turn\")) {\n        snapTurnSystem.update(deltaTime)\n      }\n      // if (platform.features.climb.enabled === true) {\n      //   let walkVector\n      //   if (platformType === \"vr\") {\n      //   }\n      // }\n    },\n  }\n}\n","import { inputSystem } from \"../input/input-system\"\nimport rotateAboutPoint from \"../_helpers/rotate-about-point\"\n\nexport default function ({ rig }) {\n  let lastXRSnapTurnTime = 0\n\n  return {\n    update(deltaTime) {\n      if (new Date().getTime() - lastXRSnapTurnTime > 200) {\n        const gamepads = inputSystem.getXRGamepads()\n\n        if (Math.abs(gamepads.right.gamepad.axes[2]) > 0.3) {\n          const way = gamepads.right.gamepad.axes[2] > 0 ? -1 : 1\n          rotateAboutPoint(\n            rig,\n            inputSystem.getXRCamera().position,\n            new THREE.Vector3(0, 1, 0),\n            (way * Math.PI) / 8,\n            false\n          )\n          lastXRSnapTurnTime = new Date().getTime()\n        }\n      }\n    },\n  }\n}\n","import * as THREE from \"three\"\n\nexport default function rotateAboutPoint(obj, point, axis, theta, pointIsWorld) {\n  pointIsWorld = pointIsWorld === undefined ? false : pointIsWorld\n\n  if (pointIsWorld) {\n    obj.parent.localToWorld(obj.position) // compensate for world coordinate\n  }\n\n  obj.position.sub(point) // remove the offset\n  obj.position.applyAxisAngle(axis, theta) // rotate the POSITION\n  obj.position.add(point) // re-add the offset\n\n  if (pointIsWorld) {\n    obj.parent.worldToLocal(obj.position) // undo world coordinates compensation\n  }\n\n  obj.rotateOnAxis(axis, theta) // rotate the OBJECT\n}\n\n// @SEE\n// THREE.Object3D.prototype.rotateAroundWorldAxis = function() {\n\n//     // rotate object around axis in world space (the axis passes through point)\n//     // axis is assumed to be normalized\n//     // assumes object does not have a rotated parent\n\n//     var q = new THREE.Quaternion();\n\n//     return function rotateAroundWorldAxis( point, axis, angle ) {\n\n//         q.setFromAxisAngle( axis, angle );\n\n//         this.applyQuaternion( q );\n\n//         this.position.sub( point );\n//         this.position.applyQuaternion( q );\n//         this.position.add( point );\n\n//         return this;\n\n//     }\n\n// }();\n","import * as THREE from \"three\"\nimport initCollisions from \"./collisions/collisions\"\nimport initLocomotion from \"./locomotion/_locomotion\"\nimport deepMerge from \"deepmerge\"\nimport { initUiOverlay, uiOverlay } from \"./ui-overlay/ui-overlay\"\nimport { initInputSystem, inputSystem } from \"./input/input-system\"\n\n// detect context before loading\nlet platformType // 'vr', 'desktop', 'mobile'\n\nif (window) {\n  ;(async () => {\n    platformType = \"desktop\"\n    const agent = window.navigator.userAgent\n    if (agent.includes(\"Quest\")) {\n      // if (await navigator.xr.isSessionSupported(\"immersive-vr\")) {\n      platformType = \"vr\"\n    } else {\n      if (window.document) {\n        function detectMobile() {\n          platformType = \"mobile\"\n          window.document.removeEventListener(\"touchstart\", detectMobile)\n        }\n        window.document.addEventListener(\"touchstart\", detectMobile)\n      }\n    }\n    //alert(platformType)\n  })()\n}\n\nconst defaultOptions = {\n  platforms: {\n    desktop: {\n      enabled: true,\n      features: {\n        walk: {\n          enabled: true,\n          bind: [\"arrows\", \"wasd\"],\n        },\n        jump: {\n          enabled: true,\n          bind: \"space\",\n        },\n      },\n    },\n    vr: {\n      enabled: true,\n      devices: [\"oculus-quest\", \"valve-index\"],\n      features: {\n        walk: {\n          enabled: true,\n          follow: \"controller-orientation\", // headset-orientation\n        },\n        run: {\n          enabled: true,\n        },\n        \"snap-turn\": {\n          enabled: true,\n          step: Math.PI / 8,\n        },\n        jump: {\n          enabled: true,\n          bind: [\"oculus-quest-button-A\", \"valve-index-A-button\"], // (device) => device === \"oculus-quest\" ? \"A\" : null\n        },\n        climb: {\n          enabled: true,\n        },\n        fly: {\n          enabled: true,\n        },\n      },\n    },\n    mobile: {\n      enabled: true,\n      forceOrientation: \"landscape\", // portrait\n      features: {\n        walk: {\n          enabled: true,\n        },\n        jump: {\n          enabled: true,\n        },\n      },\n    },\n  },\n  world: {\n    gravity: 9.81,\n  },\n}\n\nexport default async function (options) {\n  let collisionSystem, locomotionSystem, overlay\n\n  if (!platformType) {\n    throw new Error(\n      \"Cannot detect platformType, you must handle at least an user-based click before starting locomotion system\"\n    )\n  }\n\n  // initUiOverlay()\n  // console.log(\"uiOverlay\", uiOverlay)\n  // uiOverlay.innerHTML = \"<button>dsqdsq</button>\"\n\n  // prevent object traverse in deep merge\n  const collisionObject = options.collisionObject\n  options.collisionObject = undefined\n  // prevent object traverse in deep merge\n  const rig = options.rig\n  options.rig = undefined\n  // prevent object traverse in deep merge\n  const camera = options.camera\n  options.camera = undefined\n  // prevent object traverse in deep merge\n  const renderer = options.renderer\n  options.renderer = undefined\n  // prevent object traverse in deep merge\n  const scene = options.scene\n  options.scene = undefined\n\n  options = deepMerge(defaultOptions, options)\n\n  //   console.log(deepMerge({foo: 'bar', mdr: 'dssq'}, { mdr: 'iiiii' }))\n\n  const platform = options.platforms[platformType]\n  platform.type = platformType\n  platform.isEnabled = function (featureName) {\n    return platform.features[featureName] && platform.features[featureName].enabled\n  }\n\n  initInputSystem({ renderer })\n\n  if (platform.type === \"vr\") {\n    console.log(\"init vr session\")\n    await inputSystem.initXRSession({ renderer, scene, rig, camera })\n    console.log(\"VR session started\")\n  }\n\n  if (platform.type === \"mobile\") {\n    // alert()\n    await inputSystem.initMobileInput()\n    //inputSystem.getMobileJoysticksValue()\n  }\n\n  collisionSystem = initCollisions({ collisionObject })\n  locomotionSystem = initLocomotion({ platform, overlay, camera, rig })\n\n  // await new Promise(r => setTimeout(r, 4000))\n  return {\n    update(deltaTime) {\n      // console.log(inputSystem.getKeyboardState())\n      locomotionSystem.update(deltaTime)\n      collisionSystem.update(deltaTime)\n    },\n    on() {},\n    getPlatform: () => platform,\n  }\n}\n","export default function ({ collisionObject }) {\n  return {\n    update(dt) {},\n  }\n}\n","import fpLcomotion from '../src/index'\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader.js\"\nimport * as THREE from \"three\"\n\nfunction addStartButton(onStart) {\n    document.body.innerHTML = \"\"\n    const startButton = document.createElement('div')\n    startButton.innerHTML = \"START\"\n    startButton.style.fontSize = '30px';\n    startButton.style.cursor = 'pointer';\n    startButton.style.background = 'white';\n    startButton.style.padding = '15px 20px';\n    startButton.style.color = 'black';\n    startButton.style.fontWeight = 'bold';\n    startButton.style.position = 'fixed';\n    startButton.style.top = '50%';\n    startButton.style.left = '50%';\n    startButton.style.transform = 'translate3d(-50%, -50%, 0)';\n    document.body.appendChild(startButton)\n    startButton.addEventListener('click', () => {\n        startButton.remove()\n        onStart()\n    })\n}\n\n\nlet scene, camera, renderer, locomotion\n\nwindow.openExample1 = () => {\n    const loader = new GLTFLoader().setPath('./')\n    loader.load('demo-scene/demo-scene.glb', function (gltf) {\n        console.log('demo scene loaded')\n        // console.log(gltf.scene)\n\n        addStartButton( async function onStart() {\n\n            //alert(locomotion.getContext())\n            // scene\n            scene = new THREE.Scene()\n            scene.background = new THREE.Color(0xabcdef)\n\n            // camera\n            camera = window.camera = new THREE.PerspectiveCamera(\n                50,\n                window.innerWidth / window.innerHeight,\n                0.1,\n                100000\n            )\n            camera.position.set(0, 1.7, 0)\n            camera.lookAt(100, 0, 100)\n            // scene.add(camera)\n\n            // renderer\n            renderer = window.renderer = new THREE.WebGLRenderer({ antialias: false })\n            renderer.setPixelRatio(window.devicePixelRatio)\n            renderer.setSize(window.innerWidth, window.innerHeight)\n            renderer.outputEncoding = THREE.sRGBEncoding\n            function onWindowResize() {\n                camera.aspect = window.innerWidth / window.innerHeight\n                camera.updateProjectionMatrix()\n                renderer.setSize(window.innerWidth, window.innerHeight)\n            }\n            window.addEventListener(\"resize\", onWindowResize, false)\n            // renderer.xr.enabled = true\n            document.body.appendChild(renderer.domElement)\n\n            // lighting\n            const ambientLight = new THREE.AmbientLight(0x5555ff)\n            ambientLight.intensity = 0.5\n            scene.add(ambientLight)\n            const directionalLight = new THREE.DirectionalLight(0xff0022, 0.5)\n            directionalLight.position.set(-5, 25, -5)\n\n            // create body rig\n            const rig = new THREE.Group()\n            rig.position.set(0, 0, 0)\n            scene.add(rig)\n            rig.add(camera)\n\n            // add scene\n            scene.add(gltf.scene)\n\n            // init locomotion\n            const locomotion = await fpLcomotion({\n                collisionObject: gltf.scene, // collision meshes,\n                renderer,\n                scene,\n                rig,\n                camera\n            })\n\n            const clock = new THREE.Clock()\n            renderer.setAnimationLoop(function () {\n                //console.log(clock)\n                const deltaTime = clock.getDelta() // in seconds\n                locomotion.update(deltaTime)\n                renderer.render(scene, camera)\n            })\n\n            window.renderer1 = renderer\n            window.THREE = THREE\n                \n        }) //onStart\n    })\n}"],"names":["originalCamera","XRSession","modulePath","importFunctionName","Function","error","baseURL","URL","location","cleanup","script","revokeObjectURL","src","remove","url","Promise","resolve","reject","absURL","self","moduleMap","moduleBlob","Blob","type","Object","assign","document","createElement","createObjectURL","[object Object]","Error","head","appendChild","p","controllers","async","data","geometry","material","targetRayMode","THREE.RingBufferGeometry","THREE.MeshBasicMaterial","opacity","transparent","side","THREE.DoubleSide","THREE.Mesh","htmlContainer","virtualJoysticks","left","right","defaultState","active","touchIdentifier","touchStartPosition","x","y","innerCirclePosition","vector","self2","deepmerge","zone","classList","add","innerHTML","joystickElement","querySelector","innerCircleElement","style","top","delay","bottom","addEventListener","event","targetTouches","identifier","pageX","pageY","intersection","point","circleCenter","radius","lineLength","Math","sqrt","alpha","intersectLineCircle","touches","item","center","getVectorValue","resetZonePosition","getVector","element","keyboardState","inputSystem","window","initXRSession","renderer","scene","rig","camera","camera2","xr","enabled","navigator","requestSession","optionalFeatures","log","setSession","index","controller","renderer2","getController","mesh","buildController","handedness","hand","this","children","conditionFn","timeout","err","waitUntil","getXRControllers","getXRGamepads","pads","inputSources","list","filter","i","find","getXRSession","getXRCamera","getCamera","initMobileInput","href","includes","documentElement","requestFullscreen","body","createJoystick","getMobileJoysticksValue","getKeyboardState","platform","playerVelocity","THREE.Vector3","direction","getWorldDirection","parent","multiplyScalar","rotation","order","requestPointerLock","pointerLockElement","movementX","movementY","deltaTime","forwardValue","sideValue","keys","forward","backward","gamepad","axes","deltaPosition","getForwardVector","cross","up","getSideVector","damping","exp","addScaledVector","position","overlay","walkingSystem","snapTurnSystem","isEnabled","initWalkingSystem","lastXRSnapTurnTime","Date","getTime","gamepads","abs","way","obj","axis","THREE","Vector3","theta","PI","pointIsWorld","localToWorld","sub","applyAxisAngle","worldToLocal","rotateOnAxis","initSnapTurnSystem","update","platformType","userAgent","detectMobile","removeEventListener","defaultOptions","platforms","desktop","features","walk","bind","jump","vr","devices","follow","run","snap-turn","step","climb","fly","mobile","forceOrientation","world","gravity","options","collisionSystem","locomotionSystem","collisionObject","scene2","deepMerge","featureName","code","dt","initCollisions","initLocomotion","getPlatform","openExample1","GLTFLoader","setPath","load","gltf","onStart","startButton","fontSize","cursor","background","padding","color","fontWeight","transform","THREE.Scene","THREE.Color","THREE.PerspectiveCamera","innerWidth","innerHeight","set","lookAt","THREE.WebGLRenderer","antialias","setPixelRatio","devicePixelRatio","setSize","outputEncoding","THREE.sRGBEncoding","aspect","updateProjectionMatrix","domElement","ambientLight","THREE.AmbientLight","intensity","THREE.DirectionalLight","THREE.Group","locomotion","fpLcomotion","clock","THREE.Clock","setAnimationLoop","getDelta","render","renderer1"],"mappings":"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"}