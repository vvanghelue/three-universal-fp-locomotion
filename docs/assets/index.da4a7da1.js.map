{"version":3,"file":"index.da4a7da1.js","sources":["../../src/input/xr/xr-input.js","../../vite/dynamic-import-polyfill","../../src/input/mobile/mobile-input.js","../../src/input/input-system.js","../../src/_helpers/wait-until.js","../../src/locomotion/walk.js","../../src/locomotion/_locomotion.js","../../src/locomotion/snap-turn.js","../../src/_helpers/rotate-about-point.js","../../src/index.js","../../src/collisions/collisions.js","../../examples/example1.js"],"sourcesContent":["import * as THREE from \"three\"\nimport { inputSystem } from \"../input-system\"\nimport waitUntil from \"../../_helpers/wait-until\"\nimport { Camera } from \"three\"\n\nlet originalCamera\nlet XRSession\nlet controllers = {}\n\nexport function getXRControllers() {\n  return controllers\n}\n\nexport function getXRSession() {\n  return XRSession\n}\n\nexport function getXRCamera() {\n  return renderer.xr.getCamera(originalCamera)\n}\n\nasync function buildController(data) {\n  let geometry, material\n\n  if (data.targetRayMode == \"tracked-pointer\") {\n    geometry = new THREE.RingBufferGeometry(0.02, 0.04, 32) //.translate(0, 0, -1)\n    material = new THREE.MeshBasicMaterial({\n      opacity: 0.5,\n      transparent: true,\n      side: THREE.DoubleSide,\n    })\n    return new THREE.Mesh(geometry, material)\n  }\n}\n\nexport function getXRGamepads() {\n  const pads = XRSession && XRSession.inputSources\n  if (pads) {\n    const list = [pads[0], pads[1]].filter((i) => i)\n    const left = list.find((i) => i.handedness === \"left\")\n    const right = list.find((i) => i.handedness === \"right\")\n    if (!left || !right) {\n      return false\n    }\n    return { left, right }\n  }\n  return null\n}\n\nexport function getXRGamepadButtonValue(hand, index) {\n  return getXRGamepads() && getXRGamepads()[hand].gamepad.buttons.map((i) => i.value)[index]\n}\n\nexport async function initXRSession({ renderer, rig, camera }) {\n  originalCamera = camera\n\n  renderer.xr.enabled = true\n  const sessionOptions = { optionalFeatures: [\"local-floor\", \"bounded-floor\", \"hand-tracking\"] }\n  XRSession = await navigator.xr.requestSession(\"immersive-vr\", sessionOptions)\n  if (!XRSession) {\n    console.log(\"session not there\")\n    alert(\"XR Session not started\")\n    return\n  }\n  XRSession.addEventListener(\"end\", function () {\n    console.log(\"session end\")\n    //   GAME_STOPPED = true\n    XRSession = null\n  })\n  renderer.xr.setSession(XRSession)\n\n  // PLAYER HEIGHT\n  // console.log(renderer.xr.getCamera(camera).position.y)\n\n  for (const index of [0, 1]) {\n    const controller = renderer.xr.getController(index)\n    controller.addEventListener(\"connected\", async function (event) {\n      // console.log(\"connected\", event)\n      const mesh = await buildController(event.data)\n      controllers[event.data.handedness] = {\n        hand: event.data.handedness,\n        mesh: mesh,\n      }\n      this.add(mesh)\n    })\n    controller.addEventListener(\"disconnected\", function () {\n      this.remove(this.children[0])\n    })\n    rig.add(controller)\n  }\n\n  return await waitUntil(\n    function () {\n      return controllers.left && controllers.right\n    },\n    5000,\n    \"Controllers not loaded (timeout)\"\n  )\n}\n","const p = function polyfill(modulePath = '.', importFunctionName = '__import__') {\n    try {\n        self[importFunctionName] = new Function('u', `return import(u)`);\n    }\n    catch (error) {\n        const baseURL = new URL(modulePath, location);\n        const cleanup = (script) => {\n            URL.revokeObjectURL(script.src);\n            script.remove();\n        };\n        self[importFunctionName] = (url) => new Promise((resolve, reject) => {\n            const absURL = new URL(url, baseURL);\n            // If the module has already been imported, resolve immediately.\n            if (self[importFunctionName].moduleMap[absURL]) {\n                return resolve(self[importFunctionName].moduleMap[absURL]);\n            }\n            const moduleBlob = new Blob([\n                `import * as m from '${absURL}';`,\n                `${importFunctionName}.moduleMap['${absURL}']=m;`\n            ], { type: 'text/javascript' });\n            const script = Object.assign(document.createElement('script'), {\n                type: 'module',\n                src: URL.createObjectURL(moduleBlob),\n                onerror() {\n                    reject(new Error(`Failed to import: ${url}`));\n                    cleanup(script);\n                },\n                onload() {\n                    resolve(self[importFunctionName].moduleMap[absURL]);\n                    cleanup(script);\n                }\n            });\n            document.head.appendChild(script);\n        });\n        self[importFunctionName].moduleMap = {};\n    }\n};__VITE_IS_MODERN__&&p(\"assets/\");","import hasParent from \"../../_helpers/dom-element-has-parent\"\nimport delay from \"delay\"\nimport deepmerge from \"deepmerge\"\nimport { MaxEquation } from \"three\"\n\nconst BACK_TO_POSITION_ANIMATION_DURATION = 200\nconst JOYSTICK_RADIUS = 80\n\nlet htmlContainer\nconst virtualJoysticks = {\n  left: null,\n  right: null,\n}\n\nconst screenSize = {\n  x: 0,\n  y: 0,\n}\n\nfunction createJoystick(side) {\n  const defaultState = {\n    active: false,\n    touchIdentifier: null,\n    touchStartPosition: {\n      x: 0,\n      y: 0,\n    },\n    innerCirclePosition: {\n      x: 0,\n      y: 0,\n    },\n    vector: {\n      x: 0,\n      y: 0,\n    },\n  }\n  let self = deepmerge({}, defaultState)\n\n  const zone = document.createElement(\"div\")\n  zone.classList.add(\"joystick-zone\")\n  zone.innerHTML = `\n        <div class=\"joystick\">\n        </div>\n        <div class=\"inner-circle\"></div>\n    `\n  const joystickElement = zone.querySelector(\".joystick\")\n  const innerCircleElement = zone.querySelector(\".inner-circle\")\n\n  async function resetZonePosition() {\n    zone.classList.add(\"animate-joystick-start-position\")\n    if (side === \"left\") {\n      zone.style.left = \"15px\"\n      joystickElement.style.top = \"75vh\"\n      joystickElement.style.left = \"20vw\"\n      innerCircleElement.style.top = \"75vh\"\n      innerCircleElement.style.left = \"20vw\"\n    }\n    if (side === \"right\") {\n      zone.style.right = \"15px\"\n      joystickElement.style.top = \"75vh\"\n      joystickElement.style.left = \"80vw\"\n      innerCircleElement.style.top = \"75vh\"\n      innerCircleElement.style.left = \"80vw\"\n    }\n    await delay(BACK_TO_POSITION_ANIMATION_DURATION)\n    zone.classList.remove(\"animate-joystick-start-position\")\n  }\n  resetZonePosition()\n\n  joystickElement.style.bottom = \"20vh\"\n  innerCircleElement.style.bottom = \"20vh\"\n\n  function updateJoystickPosition({ x, y }) {\n    joystickElement.style.top = `${y}px`\n    joystickElement.style.left = `${x}px`\n  }\n\n  function updateInnerCirclePosition({ x, y }) {\n    innerCircleElement.style.top = `${y}px`\n    innerCircleElement.style.left = `${x}px`\n  }\n\n  function intersectLineCircle({ point, circleCenter, radius }) {\n    // console.log(...arguments)\n    // const output = lineCircleCollision(\n    //     [endPoint.x, endPoint.y],\n    //   [startPoint.x, startPoint.y],\n    //   [circleCenter.x, circleCenter.y],\n    //   radius\n    // )\n    const lenX = point.x - circleCenter.x\n    const lenY = point.y - circleCenter.y\n\n    const lineLength = Math.sqrt(\n      (point.x - circleCenter.x) * (point.x - circleCenter.x) +\n        (point.y - circleCenter.y) * (point.y - circleCenter.y)\n    )\n    const alpha = (lineLength - radius) / lineLength\n    // console.log(alpha)\n    if (alpha <= 0) {\n      return false\n    }\n    // return output\n    return {\n      x: point.x + (circleCenter.x - point.x) * alpha,\n      y: point.y + (circleCenter.y - point.y) * alpha,\n    }\n  }\n\n  function getVectorValue({ center, point, radius }) {\n    return {\n      x: (point.x - center.x) / radius,\n      y: (-1 * (point.y - center.y)) / radius,\n    }\n  }\n\n  zone.addEventListener(\"touchstart\", (event) => {\n    // console.log(\"touchstart\", event)\n    joystickElement.classList.add(\"active\")\n    innerCircleElement.classList.add(\"active\")\n    if (self.active) {\n      return\n    }\n    // console.log(event.targetTouches[0].identifier)\n    self.active = true\n    self.touchIdentifier = event.targetTouches[0].identifier\n    self.touchStartPosition.x = event.targetTouches[0].pageX\n    self.touchStartPosition.y = event.targetTouches[0].pageY\n    updateJoystickPosition(self.touchStartPosition)\n    updateInnerCirclePosition(self.touchStartPosition)\n  })\n  zone.addEventListener(\"touchmove\", (event) => {\n    // console.log(\"touchmove\", event.changedTouches.item(self.touchIdentifier))\n    // console.log(\"touchmove\", event.touches.length, event.changedTouches.length, event.targetTouches.length)\n    if (self.active) {\n      let touch\n      for (let i = 0; i < event.touches.length; i++) {\n        if (event.touches[i].identifier === self.touchIdentifier) {\n          touch = event.touches[i]\n          break\n        }\n      }\n      if (!touch) {\n        return\n      }\n      const point = {\n        x: touch.pageX,\n        y: touch.pageY,\n      }\n      const intersection = intersectLineCircle({\n        point,\n        circleCenter: self.touchStartPosition,\n        radius: JOYSTICK_RADIUS,\n      })\n      if (intersection) {\n        self.innerCirclePosition.x = intersection.x\n        self.innerCirclePosition.y = intersection.y\n      } else {\n        self.innerCirclePosition.x = point.x\n        self.innerCirclePosition.y = point.y\n      }\n\n      self.vector = getVectorValue({\n        center: self.touchStartPosition,\n        point: self.innerCirclePosition,\n        radius: JOYSTICK_RADIUS,\n      })\n      updateInnerCirclePosition(self.innerCirclePosition)\n    }\n  })\n  zone.addEventListener(\"touchend\", () => {\n    // console.log(\"touchend\", event)\n    self = deepmerge({}, defaultState)\n    setTimeout(resetZonePosition, 100)\n    joystickElement.classList.remove(\"active\")\n    innerCircleElement.classList.remove(\"active\")\n  })\n\n  return {\n    getVector() {\n      return self.vector\n    },\n    element: zone,\n  }\n}\n\nexport async function initMobileInput() {\n  if (!location.href.includes(\"localhost\")) {\n    const userAgent = window.navigator.userAgent\n    if (!userAgent.match(/iPad/i) && !userAgent.match(/iPhone/i)) {\n      document.documentElement.requestFullscreen()\n    }\n  }\n\n  htmlContainer = document.createElement(\"div\")\n  htmlContainer.classList.add(\"virtual-joysticks\")\n  document.body.appendChild(htmlContainer)\n\n  virtualJoysticks.left = createJoystick(\"left\")\n  htmlContainer.appendChild(virtualJoysticks.left.element)\n\n  virtualJoysticks.right = createJoystick(\"right\")\n  htmlContainer.appendChild(virtualJoysticks.right.element)\n\n  //   document.body.addEventListener(\"touchstart\", (event) => {\n  //     // console.log('touchstart', event)\n  //     if (true) {\n  //       // console.log(event.clientX, event.clientY, screen.width, screen.height)\n  //     }\n  //   })\n  //   document.body.addEventListener(\"touchmove\", (event) => {\n  //     // console.log(\"touchmove\", event.targetTouches)\n  //   })\n  //   document.body.addEventListener(\"touchend\", (event) => {\n  //     // console.log('touchstart', event)\n  //   })\n}\n\nexport function getMobileJoysticksValue() {\n  return {\n    left: virtualJoysticks.left.getVector(),\n    right: virtualJoysticks.right.getVector(),\n  }\n}\n\nconst style = document.createElement(\"style\")\nstyle.innerHTML = `\n    .virtual-joysticks {\n        position: fixed;\n        left: 0;\n        bottom: 0;\n    }\n    .virtual-joysticks .joystick-zone {\n        background: rgba(0, 255, 0, .3);\n        position: fixed;\n        bottom: 10px;\n        width: calc(35vw - 30px);\n        height: calc(55vh - 30px);\n    }\n    .virtual-joysticks .joystick {\n        width: 1px;\n        height: 1px;\n        position: fixed;\n        transition: opacity 500ms ease;\n        opacity: .3;\n    }\n    .virtual-joysticks .joystick:after {\n        content: \"\";\n        display:block;\n        width: ${JOYSTICK_RADIUS * 2}px;\n        height: ${JOYSTICK_RADIUS * 2}px;\n        background: rgba(255, 255, 255, .2);\n        border: 2px solid rgba(255, 255, 255, .6);\n        border-radius: 50%;\n        transform: translate3d(-50%,-50%,0);\n    }\n    .virtual-joysticks .inner-circle {\n        width: 1px;\n        height: 1px;\n        position: fixed;\n        transition: opacity 500ms ease;\n        opacity: .5;\n    }\n    .virtual-joysticks .inner-circle:after {\n        content: \"\";\n        display:block;\n        width: 50px;\n        height: 50px;\n        background: rgba(255, 255, 255, .4);\n        border-radius: 50%;\n        transform: translate3d(-50%,-50%,0);\n    }\n\n    .animate-joystick-start-position .joystick,\n    .animate-joystick-start-position .inner-circle {\n        transition: ${BACK_TO_POSITION_ANIMATION_DURATION}ms ease;\n    }\n    .virtual-joysticks .joystick.active {\n        opacity: 1;\n    }\n    .virtual-joysticks .inner-circle.active {\n        opacity: 1;\n    }\n`\ndocument.head.appendChild(style)\n","import {\n  initXRSession,\n  getXRSession,\n  getXRControllers,\n  getXRGamepads,\n  getXRCamera,\n} from \"./xr/xr-input\"\n\nimport { initMobileInput, getMobileJoysticksValue } from \"./mobile/mobile-input\"\n\nlet keyboardState = {}\n\nexport function initInputSystem({ renderer }) {\n  document.addEventListener(\n    \"keydown\",\n    (event) => {\n      keyboardState[event.code] = true\n    },\n    false\n  )\n  document.addEventListener(\n    \"keyup\",\n    (event) => {\n      keyboardState[event.code] = false\n    },\n    false\n  )\n}\n\nexport const inputSystem = (window.inputSystem = {\n  // vr\n  initXRSession,\n  getXRControllers,\n  getXRGamepads,\n  getXRSession,\n  getXRCamera,\n  // mobile\n  initMobileInput,\n  getMobileJoysticksValue,\n  // desktop\n  getKeyboardState() {\n    return keyboardState\n  },\n})\n","import delay from \"delay\"\n\nexport default async function waitUntil(conditionFn, timeout, err) {\n  return new Promise(async function (resolve) {\n    err = err || \"waitUntil : timeout on condition : \" + conditionFn\n    while (!conditionFn()) {\n      //console.log(conditionFn())\n      if (timeout < 0) {\n        throw new Error(err)\n      }\n      await delay(300)\n      timeout -= 300\n    }\n    resolve()\n  })\n}\n","import { inputSystem } from \"../input/input-system\"\nimport * as THREE from \"three\"\n\nconst SPEED = 5\nconst INERTIA_FACTOR = 0.7\n\nexport default function ({ platform, camera, rig, rigVelocity, collisionSystem }) {\n  const desktopKeyboardState = {}\n  if (platform.type == \"desktop\" || platform.type == \"mobile\") {\n    camera.rotation.order = \"YXZ\"\n  }\n  if (platform.type == \"desktop\") {\n    document.body.requestPointerLock()\n\n    document.body.addEventListener(\n      \"mousemove\",\n      (event) => {\n        if (document.pointerLockElement === document.body) {\n          camera.rotation.y -= event.movementX / 500\n          camera.rotation.x -= -event.movementY / 500\n        }\n      },\n      false\n    )\n  }\n\n  function getSideVector() {\n    const direction = getForwardVector(camera)\n    direction.cross(camera.up)\n    return direction\n  }\n\n  function getForwardVector() {\n    const direction = new THREE.Vector3()\n    if (platform.type == \"desktop\" || platform.type == \"mobile\") {\n      camera.getWorldDirection(direction)\n      direction.y = 0\n    }\n    if (platform.type == \"vr\") {\n      inputSystem.getXRControllers().left.mesh.parent.getWorldDirection(direction)\n      direction.multiplyScalar(-1)\n      direction.y = 0\n    }\n    direction.normalize()\n    return direction\n  }\n\n  return {\n    update(deltaTime) {\n      if (platform.type == \"mobile\") {\n        camera.rotation.y -= inputSystem.getMobileJoysticksValue().right.x / 30\n        camera.rotation.x -= inputSystem.getMobileJoysticksValue().right.y / 30\n      }\n\n      if (!collisionSystem.isRigOnFloor()) {\n        return\n      }\n\n      let forwardValue = 0\n      let sideValue = 0\n\n      if (platform.type == \"desktop\") {\n        const keys = inputSystem.getKeyboardState()\n        const forward = keys[\"KeyW\"] || keys[\"ArrowUp\"] ? 1 : 0\n        const backward = keys[\"KeyS\"] || keys[\"ArrowDown\"] ? -1 : 0\n        const right = keys[\"KeyD\"] || keys[\"ArrowRight\"] ? 1 : 0\n        const left = keys[\"KeyA\"] || keys[\"ArrowLeft\"] ? -1 : 0\n        forwardValue = forward + backward\n        sideValue = left + right\n        sideValue = sideValue / 2\n      }\n\n      if (platform.type == \"mobile\") {\n        forwardValue = inputSystem.getMobileJoysticksValue().left.y * 1.2\n        sideValue = inputSystem.getMobileJoysticksValue().left.x / 2\n\n        // camera.rotation.y -= inputSystem.getMobileJoysticksValue().right.x / 30\n        // camera.rotation.x -= inputSystem.getMobileJoysticksValue().right.y / 30\n      }\n\n      if (platform.type == \"vr\") {\n        forwardValue = inputSystem.getXRGamepads().left.gamepad.axes[3] * -1\n        sideValue = inputSystem.getXRGamepads().left.gamepad.axes[2]\n      }\n\n      const deltaPosition = new THREE.Vector3(0, 0, 0)\n      deltaPosition\n        .add(getForwardVector(camera).multiplyScalar(forwardValue))\n        .add(getSideVector(camera).multiplyScalar(sideValue))\n        // .normalize()\n        .multiplyScalar(SPEED * platform.features.walk.speedFactor)\n      rigVelocity.add(deltaPosition)\n\n      // rigVelocity.copy(deltaPosition)\n\n      // const damping = Math.exp(-1.0001) - 1\n      // rigVelocity.addScaledVector(rigVelocity, damping)\n      rigVelocity.multiplyScalar(INERTIA_FACTOR)\n    },\n  }\n}\n","import * as THREE from \"three\"\nimport initWalkingSystem from \"./walk\"\nimport initSnapTurnSystem from \"./snap-turn\"\n// import { collisionSystem } from \"../collisions/collisions\"\n\n// import initClimbingSystem from \"./climb\"\n// import initFlyingSystem from \"./fly\"\n\nconst GRAVITY_FACTOR = 8\n\nexport default function initLocomotion({ platform, overlay, camera, rig, collisionSystem }) {\n  window.collisionSystem = collisionSystem\n  let rigVelocity = (window.rigVelocity = new THREE.Vector3(0, 0, 0))\n  // console.log(platform)\n\n  let walkingSystem, snapTurnSystem\n\n  if (platform.isEnabled(\"walk\")) {\n    walkingSystem = initWalkingSystem({ platform, camera, rig, rigVelocity, collisionSystem })\n  }\n  if (platform.isEnabled(\"snap-turn\")) {\n    snapTurnSystem = initSnapTurnSystem({ rig })\n  }\n\n  return {\n    update(deltaTime) {\n      if (platform.isEnabled(\"walk\")) {\n        walkingSystem.update(deltaTime)\n      }\n      if (platform.isEnabled(\"snap-turn\")) {\n        snapTurnSystem.update(deltaTime)\n      }\n\n      // console.log(collisionSystem.isRigOnFloor())\n      // GRAVITY\n      if (!collisionSystem.isRigOnFloor()) {\n        rigVelocity.y -= GRAVITY_FACTOR * deltaTime\n\n        const horizontalDamping = Math.exp(-0.5 * deltaTime)\n        rigVelocity.x = rigVelocity.x * horizontalDamping\n        rigVelocity.z = rigVelocity.z * horizontalDamping\n      }\n\n      const deltaPosition = rigVelocity.clone().multiplyScalar(deltaTime)\n      rig.position.add(deltaPosition)\n\n      // if (platform.features.climb.enabled === true) {\n      //   let walkVector\n      //   if (platformType === \"vr\") {\n      //   }\n      // }\n    },\n  }\n}\n","import { inputSystem } from \"../input/input-system\"\nimport rotateAboutPoint from \"../_helpers/rotate-about-point\"\n\nexport default function ({ rig }) {\n  let lastXRSnapTurnTime = 0\n\n  return {\n    update(deltaTime) {\n      if (new Date().getTime() - lastXRSnapTurnTime > 200) {\n        const gamepads = inputSystem.getXRGamepads()\n\n        if (Math.abs(gamepads.right.gamepad.axes[2]) > 0.3) {\n          const way = gamepads.right.gamepad.axes[2] > 0 ? -1 : 1\n          rotateAboutPoint(\n            rig,\n            inputSystem.getXRCamera().position,\n            new THREE.Vector3(0, 1, 0),\n            (way * Math.PI) / 8,\n            false\n          )\n          lastXRSnapTurnTime = new Date().getTime()\n        }\n      }\n    },\n  }\n}\n","import * as THREE from \"three\"\n\nexport default function rotateAboutPoint(obj, point, axis, theta, pointIsWorld) {\n  pointIsWorld = pointIsWorld === undefined ? false : pointIsWorld\n\n  if (pointIsWorld) {\n    obj.parent.localToWorld(obj.position) // compensate for world coordinate\n  }\n\n  obj.position.sub(point) // remove the offset\n  obj.position.applyAxisAngle(axis, theta) // rotate the POSITION\n  obj.position.add(point) // re-add the offset\n\n  if (pointIsWorld) {\n    obj.parent.worldToLocal(obj.position) // undo world coordinates compensation\n  }\n\n  obj.rotateOnAxis(axis, theta) // rotate the OBJECT\n}\n\n// @SEE\n// THREE.Object3D.prototype.rotateAroundWorldAxis = function() {\n\n//     // rotate object around axis in world space (the axis passes through point)\n//     // axis is assumed to be normalized\n//     // assumes object does not have a rotated parent\n\n//     var q = new THREE.Quaternion();\n\n//     return function rotateAroundWorldAxis( point, axis, angle ) {\n\n//         q.setFromAxisAngle( axis, angle );\n\n//         this.applyQuaternion( q );\n\n//         this.position.sub( point );\n//         this.position.applyQuaternion( q );\n//         this.position.add( point );\n\n//         return this;\n\n//     }\n\n// }();\n","import * as THREE from \"three\"\nimport initCollisions from \"./collisions/collisions\"\nimport initLocomotion from \"./locomotion/_locomotion\"\nimport deepMerge from \"deepmerge\"\nimport { initUiOverlay, uiOverlay } from \"./ui-overlay/ui-overlay\"\nimport { initInputSystem, inputSystem } from \"./input/input-system\"\n\n// detect context before loading\nlet platformType // 'vr', 'desktop', 'mobile'\n\nif (window) {\n  ;(async () => {\n    platformType = \"desktop\"\n    const agent = window.navigator.userAgent\n    if (agent.includes(\"Quest\")) {\n      // if (await navigator.xr.isSessionSupported(\"immersive-vr\")) {\n      platformType = \"vr\"\n    } else {\n      if (window.document) {\n        function detectMobile() {\n          platformType = \"mobile\"\n          window.document.removeEventListener(\"touchstart\", detectMobile)\n        }\n        window.document.addEventListener(\"touchstart\", detectMobile)\n      }\n    }\n    //alert(platformType)\n  })()\n}\n\nconst defaultOptions = {\n  platforms: {\n    desktop: {\n      enabled: true,\n      features: {\n        walk: {\n          enabled: true,\n          bind: [\"arrows\", \"wasd\"],\n          speedFactor: 1,\n        },\n        jump: {\n          enabled: true,\n          bind: \"space\",\n        },\n      },\n    },\n    vr: {\n      enabled: true,\n      devices: [\"oculus-quest\", \"valve-index\"],\n      features: {\n        walk: {\n          enabled: true,\n          follow: \"controller-orientation\", // headset-orientation,\n          speedFactor: 1,\n        },\n        run: {\n          enabled: true,\n        },\n        \"snap-turn\": {\n          enabled: true,\n          step: Math.PI / 8,\n        },\n        jump: {\n          enabled: true,\n          bind: [\"oculus-quest-button-A\", \"valve-index-A-button\"], // (device) => device === \"oculus-quest\" ? \"A\" : null\n        },\n        climb: {\n          enabled: true,\n        },\n        fly: {\n          enabled: true,\n        },\n      },\n    },\n    mobile: {\n      enabled: true,\n      forceOrientation: \"landscape\", // portrait\n      features: {\n        walk: {\n          enabled: true,\n          speedFactor: 1,\n        },\n        jump: {\n          enabled: true,\n        },\n      },\n    },\n  },\n  world: {\n    gravity: 9.81,\n  },\n}\n\nexport default async function (options) {\n  let collisionSystem, locomotionSystem, overlay\n\n  if (!platformType) {\n    throw new Error(\n      \"Cannot detect platformType, you must handle at least an user-based click before starting locomotion system\"\n    )\n  }\n\n  // initUiOverlay()\n  // console.log(\"uiOverlay\", uiOverlay)\n  // uiOverlay.innerHTML = \"<button>dsqdsq</button>\"\n\n  // prevent object traverse in deep merge\n  const collisionObject = options.collisionObject\n  options.collisionObject = undefined\n  // prevent object traverse in deep merge\n  const rig = options.rig\n  options.rig = undefined\n  // prevent object traverse in deep merge\n  const camera = options.camera\n  options.camera = undefined\n  // prevent object traverse in deep merge\n  const renderer = options.renderer\n  options.renderer = undefined\n\n  options = deepMerge(defaultOptions, options)\n\n  //   console.log(deepMerge({foo: 'bar', mdr: 'dssq'}, { mdr: 'iiiii' }))\n\n  const platform = options.platforms[platformType]\n  platform.type = platformType\n  platform.isEnabled = function (featureName) {\n    return platform.features[featureName] && platform.features[featureName].enabled\n  }\n\n  initInputSystem({ renderer })\n\n  if (platform.type === \"vr\") {\n    console.log(\"init vr session\")\n    await inputSystem.initXRSession({ renderer, rig, camera })\n    console.log(\"VR session started\")\n  }\n\n  if (platform.type === \"mobile\") {\n    // alert()\n    await inputSystem.initMobileInput()\n    //inputSystem.getMobileJoysticksValue()\n  }\n\n  collisionSystem = initCollisions({ platform, collisionObject, rig })\n  locomotionSystem = initLocomotion({ platform, overlay, camera, rig, collisionSystem })\n\n  // await new Promise(r => setTimeout(r, 4000))\n  return {\n    update(deltaTime) {\n      // console.log(inputSystem.getKeyboardState())\n      locomotionSystem.update(deltaTime)\n      collisionSystem.update(deltaTime)\n    },\n    on() {},\n    getPlatform: () => platform,\n  }\n}\n","import { inputSystem } from \"../input/input-system\"\nimport * as THREE from \"three\"\nimport { Octree } from \"three/examples/jsm/math/Octree.js\"\nimport { Capsule } from \"three/examples/jsm/math/Capsule.js\"\n\n// Collision system with world octree and body capsule\n// 99.99 % inspired by https://threejs.org/examples/?q=fps#games_fps\n\nexport default function initCollisions({ platform, collisionObject, rig }) {\n  // console.log('platform', platform)\n  const DEFAULT_BODY_HEIGHT = 1.7\n  const DEFAULT_BODY_RADIUS = 0.35\n\n  let rigOnFloor = true\n\n  let worldOctree = new Octree()\n  worldOctree.fromGraphNode(collisionObject)\n\n  const bodyCapsule = new Capsule()\n  // new THREE.Vector3(0, DEFAULT_BODY_RADIUS, 0),\n  // new THREE.Vector3(0, DEFAULT_BODY_RADIUS - DEFAULT_BODY_RADIUS, 0),\n  // DEFAULT_BODY_RADIUS\n\n  return {\n    isRigOnFloor() {\n      return rigOnFloor\n    },\n    update(dt) {\n      if (platform.type == \"desktop\" || platform.type == \"mobile\") {\n        bodyCapsule.set(\n          new THREE.Vector3(rig.position.x, rig.position.y + DEFAULT_BODY_RADIUS, rig.position.z),\n          new THREE.Vector3(\n            rig.position.x,\n            rig.position.y + DEFAULT_BODY_HEIGHT - DEFAULT_BODY_RADIUS,\n            rig.position.z\n          ),\n          DEFAULT_BODY_RADIUS\n        )\n      } // END if (platform.type == \"desktop\" ...\n\n      if (platform.type == \"vr\") {\n        const cameraPosition = inputSystem.getXRCamera().position\n        bodyCapsule.set(\n          new THREE.Vector3(\n            cameraPosition.x,\n            rig.position.y + DEFAULT_BODY_RADIUS,\n            cameraPosition.z\n          ),\n          new THREE.Vector3(\n            cameraPosition.x,\n            cameraPosition.y - DEFAULT_BODY_RADIUS,\n            cameraPosition.z\n          ),\n          DEFAULT_BODY_RADIUS\n        )\n      }\n\n      rigOnFloor = false\n      const result = worldOctree.capsuleIntersect(bodyCapsule)\n      if (result) {\n        rigOnFloor = result.normal.y > 0\n        const vector = result.normal.multiplyScalar(result.depth)\n        rig.position.add(vector)\n      }\n    },\n  }\n}\n","import fpLcomotion from '../src/index'\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader.js\"\nimport * as THREE from \"three\"\n\nfunction addStartButton(onStart) {\n    document.body.innerHTML = \"\"\n    const startButton = document.createElement('div')\n    startButton.innerHTML = \"START\"\n    startButton.style.fontSize = '30px';\n    startButton.style.cursor = 'pointer';\n    startButton.style.background = 'white';\n    startButton.style.padding = '15px 20px';\n    startButton.style.color = 'black';\n    startButton.style.fontWeight = 'bold';\n    startButton.style.position = 'fixed';\n    startButton.style.top = '50%';\n    startButton.style.left = '50%';\n    startButton.style.transform = 'translate3d(-50%, -50%, 0)';\n    document.body.appendChild(startButton)\n    startButton.addEventListener('click', () => {\n        startButton.remove()\n        onStart()\n    })\n}\n\n\nlet scene, camera, renderer, locomotion\n\nwindow.openExample1 = () => {\n    const loader = new GLTFLoader().setPath('./')\n    loader.load('demo-scene/demo-scene.glb', function (gltf) {\n        console.log('demo scene loaded')\n        // console.log(gltf.scene)\n\n        addStartButton( async function onStart() {\n\n            //alert(locomotion.getContext())\n            // scene\n            scene = new THREE.Scene()\n            scene.background = new THREE.Color(0xabcdef)\n\n            // camera\n            camera = window.camera = new THREE.PerspectiveCamera(\n                50,\n                window.innerWidth / window.innerHeight,\n                0.1,\n                100000\n            )\n            camera.position.set(0, 1.7, 0)\n            camera.lookAt(100, 0, 100)\n            // scene.add(camera)\n\n            // renderer\n            renderer = window.renderer = new THREE.WebGLRenderer({ antialias: false })\n            renderer.setPixelRatio(window.devicePixelRatio)\n            renderer.setSize(window.innerWidth, window.innerHeight)\n            renderer.outputEncoding = THREE.sRGBEncoding\n            function onWindowResize() {\n                camera.aspect = window.innerWidth / window.innerHeight\n                camera.updateProjectionMatrix()\n                renderer.setSize(window.innerWidth, window.innerHeight)\n            }\n            window.addEventListener(\"resize\", onWindowResize, false)\n            // renderer.xr.enabled = true\n            document.body.appendChild(renderer.domElement)\n\n            // lighting\n//            const ambientLight = new THREE.AmbientLight(0x5555ff)\n //           ambientLight.intensity = 0.5\n  //          scene.add(ambientLight)\n\n            const light = new THREE.HemisphereLight( 0x4444ff, 0x111111, 1 );\n            scene.add( light );\n\n            const directionalLight = new THREE.DirectionalLight(0xff4444, 1)\n            directionalLight.position.set(-15, 25, -5)\n            scene.add( directionalLight );\n\n            // fog\n            scene.fog = new THREE.Fog(0xabcdef, 0, 190)\n            // scene.fog = new THREE.FogExp2(0xffffff, .014)\n\n            // create body rig\n            const rig = window.debugRig = new THREE.Group()\n            rig.position.set(0, 0, 0)\n            scene.add(rig)\n            rig.add(camera)\n\n            // add scene\n            scene.add(gltf.scene)\n\n            // init locomotion\n            const locomotion = await fpLcomotion({\n                collisionObject: gltf.scene, // collision meshes,\n                renderer,\n                camera,\n                rig,\n            })\n            \n            const clock = new THREE.Clock()\n            renderer.setAnimationLoop(function () {\n            // setInterval(() => {\n                //console.log(clock)\n                const deltaTime = clock.getDelta() // in seconds\n                window.deltaTime = deltaTime\n                locomotion.update(deltaTime)\n                renderer.render(scene, camera)\n            //}, 1000/5)\n            })\n\n            window.renderer1 = renderer\n            window.THREE = THREE\n                \n        }) //onStart\n    })\n}"],"names":["originalCamera","XRSession","modulePath","importFunctionName","Function","error","baseURL","URL","location","cleanup","script","revokeObjectURL","src","remove","url","Promise","resolve","reject","absURL","self","moduleMap","moduleBlob","Blob","type","Object","assign","document","createElement","createObjectURL","[object Object]","Error","head","appendChild","p","controllers","async","data","geometry","material","targetRayMode","THREE.RingBufferGeometry","THREE.MeshBasicMaterial","opacity","transparent","side","THREE.DoubleSide","THREE.Mesh","htmlContainer","virtualJoysticks","left","right","defaultState","active","touchIdentifier","touchStartPosition","x","y","innerCirclePosition","vector","self2","deepmerge","zone","classList","add","innerHTML","joystickElement","querySelector","innerCircleElement","style","top","delay","bottom","addEventListener","event","targetTouches","identifier","pageX","pageY","touch","i","touches","length","point","intersection","circleCenter","radius","lineLength","Math","sqrt","alpha","intersectLineCircle","center","getVectorValue","resetZonePosition","getVector","element","keyboardState","inputSystem","window","initXRSession","renderer","rig","camera","camera2","xr","enabled","navigator","requestSession","optionalFeatures","log","setSession","index","controller","renderer2","getController","mesh","buildController","handedness","hand","this","children","conditionFn","timeout","err","waitUntil","getXRControllers","getXRGamepads","pads","inputSources","list","filter","find","getXRSession","getXRCamera","getCamera","initMobileInput","href","includes","userAgent","match","documentElement","requestFullscreen","body","createJoystick","getMobileJoysticksValue","getKeyboardState","platform","rigVelocity","collisionSystem","direction","THREE.Vector3","getWorldDirection","parent","multiplyScalar","normalize","rotation","order","requestPointerLock","pointerLockElement","movementX","movementY","deltaTime","isRigOnFloor","forwardValue","sideValue","keys","forward","backward","gamepad","axes","deltaPosition","getForwardVector","cross","up","getSideVector","features","walk","speedFactor","overlay","walkingSystem","snapTurnSystem","isEnabled","initWalkingSystem","lastXRSnapTurnTime","Date","getTime","gamepads","abs","way","obj","position","axis","THREE","Vector3","theta","PI","pointIsWorld","localToWorld","sub","applyAxisAngle","worldToLocal","rotateOnAxis","initSnapTurnSystem","update","horizontalDamping","exp","z","clone","platformType","detectMobile","removeEventListener","defaultOptions","platforms","desktop","bind","jump","vr","devices","follow","run","snap-turn","step","climb","fly","mobile","forceOrientation","world","gravity","options","locomotionSystem","collisionObject","deepMerge","featureName","code","DEFAULT_BODY_RADIUS","rigOnFloor","worldOctree","Octree","fromGraphNode","bodyCapsule","Capsule","dt","set","cameraPosition","result","capsuleIntersect","normal","depth","initCollisions","initLocomotion","getPlatform","scene","openExample1","GLTFLoader","setPath","load","gltf","onStart","startButton","fontSize","cursor","background","padding","color","fontWeight","transform","THREE.Scene","THREE.Color","THREE.PerspectiveCamera","innerWidth","innerHeight","lookAt","THREE.WebGLRenderer","antialias","setPixelRatio","devicePixelRatio","setSize","outputEncoding","THREE.sRGBEncoding","aspect","updateProjectionMatrix","domElement","light","THREE.HemisphereLight","directionalLight","THREE.DirectionalLight","fog","THREE.Fog","debugRig","THREE.Group","locomotion","fpLcomotion","clock","THREE.Clock","setAnimationLoop","getDelta","render","renderer1"],"mappings":"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"}